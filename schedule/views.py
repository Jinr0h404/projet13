from django.shortcuts import render, redirect
from django.urls import reverse_lazy
from django.views import View
from django.views.generic import UpdateView, DeleteView
from datetime import datetime
import json
from django.contrib.auth.mixins import LoginRequiredMixin
from .models import Planning
from patient.models import Patient
from patient.forms import CreatePatientForm
from .forms import CreateScheduleForm, CreateInfoForm
from django.db.models import Q


# Create your views here.
class ScheduleView(LoginRequiredMixin, View):
    """the view class ScheduleView refers to the schedule page"""
    def get(self, request):
        return redirect("fullcalendar")


class ScheduleCalendarView(LoginRequiredMixin, View):
    """the ScheduleCalendarView view class manages the display of the schedule generated by the fullcalendar JS tool
    and allows the addition of new appointments"""
    def get(self, request):
        """the get method allows the display of the appointment creation form and will generate the display of all
        the elements in the fullcalendar schedule. It retrieves all the elements from the planning table then loops
        over each element and formats the information so that it can be read by fullcalendar in JSON."""
        form = CreateScheduleForm()
        form_info = CreateInfoForm()
        all_events = Planning.objects.all()
        event_arr = []
        for i in all_events:
            event_sub_arr = {}
            event_sub_arr["title"] = i.reason
            start_date = datetime.strptime(
                str(i.appointment_date_start.date()), "%Y-%m-%d"
            ).strftime("%Y-%m-%d")
            hour_start = datetime.strptime(
                str(i.appointment_date_start.time()), "%H:%M:%S"
            ).strftime("%H:%M:%S")
            hour_stop = datetime.strptime(
                str(i.appointment_hour_stop.time()), "%H:%M:%S"
            ).strftime("%H:%M:%S")
            end_date = datetime.strptime(
                str(i.appointment_hour_stop.date()), "%Y-%m-%d"
            ).strftime("%Y-%m-%d")
            event_sub_arr["start"] = start_date + "T" + hour_start
            event_sub_arr["end"] = end_date + "T" + hour_stop
            event_sub_arr["url"] = (
                "/gestionosteo/schedule/fullcalendar/choice" +
                "/" +
                str(i.patient_unique_id_id) +
                "/" +
                str(i.id) +
                "/"
            )
            event_arr.append(event_sub_arr)
        datatest = json.dumps(event_arr)
        context = {"appointment": datatest, "form": form, "form_info": form_info}

        return render(request, "schedule/fullcalendar.html", context)

    def post(self, request):
        """the post method retrieves information from the appointment and patient creation form. She does a search
        to see if a patient with the same last name, first name and date of birth exists. If yes, it assigns the
        found patient id to the event. If not, it creates a patient in the db and assigns the new id to the task.
        It will then concatenate the information in the pattern column to meet the limit of fullcalendar which only
        displays one line in event."""
        form = CreateScheduleForm(request.POST)
        form_info = CreatePatientForm(request.POST)
        if form.is_valid() and form_info.is_valid():
            """use request.path to avoid form resending requests when refreshing the page"""
            schedule = form.save(commit=False)
            print(schedule.appointment_hour_stop)
            schedule_info = form_info.save(commit=False)
            patient_lastname = Q(last_name__contains=schedule_info.last_name)
            patient_firstname = Q(first_name__contains=schedule_info.first_name)
            patient_birth = Q(birth_date__contains=schedule_info.birth_date)
            q = Patient.objects.filter(
                patient_lastname & patient_firstname & patient_birth
            )
            if q:
                schedule.patient_unique_id = q[0]
            else:
                schedule_info.save()
                patient_lastname = Q(last_name__contains=schedule_info.last_name)
                patient_firstname = Q(first_name__contains=schedule_info.first_name)
                patient_birth = Q(birth_date__contains=schedule_info.birth_date)
                q = Patient.objects.filter(
                    patient_lastname & patient_firstname & patient_birth
                )
                schedule.patient_unique_id = q[0]
            schedule.reason = (
                schedule.reason + " " + "|" + " " + schedule_info.last_name + " " +
                schedule_info.first_name + " " + "|" + " " + str(schedule_info.birth_date) +
                " " + "|" + " " + schedule_info.phone
            )
            schedule.save()
            return redirect(request.path)
        else:
            return render(request, "schedule/fullcalendar.html")


class ScheduleEditView(LoginRequiredMixin, UpdateView):
    """the ScheduleEditView view uses the class base UpdateView to manage the update of the element
    whose id is passed in url"""
    model = Planning
    template_name = "schedule/edit_fullcalendar.html"
    fields = ["reason", "appointment_date_start", "appointment_hour_stop"]
    success_url = reverse_lazy("fullcalendar")


class ScheduleDeleteView(LoginRequiredMixin, DeleteView):
    """the ScheduleDeleteView uses the class base DeleteView to delete the element
        whose id is passed in url"""
    model = Planning
    template_name = "schedule/delete_fullcalendar.html"
    success_url = reverse_lazy("fullcalendar")


class ScheduleChoiceView(LoginRequiredMixin, View):
    """the Schedule ChoiceView view displays the page that allows you to choose the action you want to perform after
    selecting a calendar event"""
    template_name = "schedule/choice_event_calendar.html"

    def get(self, request, pk, schedule):
        """the get method returns the patient id and event information to the context so that it can then be used
        in the user's choices"""
        context = {"patient_id": pk, "event_id": schedule}
        return render(request, "schedule/choice_event_calendar.html", context)
